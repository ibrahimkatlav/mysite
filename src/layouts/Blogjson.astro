---
const convertToTurkeyTime = (dateString) => {
  const date = new Date(dateString);

  // ISO 8601 formatında tarih ve saat
  const year = date.getUTCFullYear();
  const month = String(date.getUTCMonth() + 1).padStart(2, '0');
  const day = String(date.getUTCDate()).padStart(2, '0');
  const hours = String(date.getUTCHours()).padStart(2, '0');
  const minutes = String(date.getUTCMinutes()).padStart(2, '0');
  const seconds = String(date.getUTCSeconds()).padStart(2, '0');

  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}+03:00`;
};



import type { CollectionEntry } from 'astro:content';

type Props = CollectionEntry<'blog'>['data'];
const { title, description, tarih, date, updateDate, image } = Astro.props;
const pageUrl = new URL(Astro.url.pathname, Astro.site);

const img = "https://ibrahimkatlav.com" + image;

// Türkiye saat dilimine dönüştürülmüş tarih ve saat bilgileri
const dateTurkeyTime = convertToTurkeyTime(date);
const updateDateTurkeyTime = updateDate ? convertToTurkeyTime(updateDate) : null;

const schema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "url": pageUrl,
  "image": {
    "@type": "ImageObject",
    url: img
  },
  "author": {
    "@type": "Person",
    "name": "İbrahim Katlav",
    "url": "https://ibrahimkatlav.com"
  },
  /* the schema expects Date or DateTime using ISO 8601 format. For Date that is yyyy-MM-dd */
  "datePublished": dateTurkeyTime,
  /* updateDate is optional frontmatter, so we conditionally add dateModified if it exists */
  ...(updateDateTurkeyTime && { "dateModified": updateDateTurkeyTime }),
};
---

<script type="application/ld+json" set:html={JSON.stringify(schema)} />
